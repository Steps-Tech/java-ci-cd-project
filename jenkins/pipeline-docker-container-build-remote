//This Pipeline design to Build the Image from Dockerfile Push to the Dockerhub Pull on Remote Docker Host- 
//-Scan the Image on Remote Docker Host and Build the Container On Remote Docker Host.
//Note : When run this Pipeline Change the Port Number at Line Number 125
//Plugins : ssh-agent,docker,docker-pipeline
pipeline {
    agent any

    tools {
        maven  "MAVEN3"
        jdk  "Oracle11"
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub' // Jenkins credentials ID for Docker Hub
        DOCKER_IMAGE_NAME = 'stepstech/test'
        DOCKER_TAG = 'latest' // You can use versioning or a unique tag as needed
        //DOCKER_HOST = '172.31.72.40'
        registry = "test"
        CONTAINER_NAME = "webapp-${env.BUILD_ID}"
        
    }

    stages {
        
        stage('Fetching code') {
            steps {
                script {
                    
                    git branch : 'main' , url: 'https://github.com/devopshydclub/vprofile-project.git'
                }
            }
        }

        stage ('Source Code Build'){
            steps {
                sh 'mvn install -DskipTests'  
            }

            post {
            success {  
                echo 'Archieving the Artifact'
                archiveArtifacts artifacts: '**/*.war'
            }
          }
        }

        stage ('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('/var/lib/jenkins/workspace'){
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}")
                }
              }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        echo 'Logged in to Docker Hub'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}").push("${DOCKER_TAG}")
                        echo 'Docker Image Successfully Pushed to Docker Hub'
                    }
                }
            }
        }

        stage('Pull Docker Image on Remote Docker host') {
          steps {
            sshagent(['jenkins-docker-intergation']) { 
                sh "ssh -o StrictHostKeyChecking=no -l ubuntu 172.31.72.40  'docker pull $DOCKER_IMAGE_NAME:$DOCKER_TAG'"
                // jenkins-docker-intergation : add credential to connect docker host using Username with Private SSH key
                echo 'Docker Image Pulled on Remote Docker Host Successfully'
            }
         }
      }

        stage('Scan Docker Image by Trivy') {
          steps {
              sshagent(['jenkins-docker-intergation']) { 
                  sh "ssh -o StrictHostKeyChecking=no -l ubuntu 172.31.72.40  'trivy image $DOCKER_IMAGE_NAME:$DOCKER_TAG'"
                // jenkins-docker-intergation : add credential to connect docker host using Username with Private SSH key
                  echo 'Docker Image Scanned Successfully'
            }
         }
      }

        stage('Build Docker Container on Remote Host') {
            steps {
                sshagent(['jenkins-docker-intergation']) {
                    // Run Docker container from image
                    //docker.image("${DOCKER_IMAGE_NAME}").run('-d -p 8006:8080 --name ${CONTAINER_NAME}') // Example run options: detached mode, port mapping
                    sh "ssh -o StrictHostKeyChecking=no -l ubuntu 172.31.72.40 'docker run -itd --name $CONTAINER_NAME -p 8014:8080 $DOCKER_IMAGE_NAME:$DOCKER_TAG'"
                    echo 'Docker Container Successfully run on Remote Docker Host'
                }
            }
        }
    }

    post {
        success {
            echo 'Dockerised Application Deployed Successfully!'
        }
        failure {
            echo 'There was an issue with building Dockerised Application.'
        }
    }
}

